#!/usr/bin/env ruby
$LOAD_PATH << './lib'
require 'curses'
require 'gamename'

MIN_WIDTH  = 80
MIN_HEIGHT = 40

# Writes a character at y, x
def putch(window, row, column, char)
  window.setpos(row, column)
  window.addch(char)
end

# Writes a string at y, x
def putstr(window, row, column, string)
  window.setpos(row, column)
  window.addstr(string)
end

def init_screen
  Curses.noecho
  Curses.init_screen
  Curses.start_color
  Curses.cbreak
  Curses.stdscr.keypad(1)
  Curses.curs_set(0)

  Curses.init_pair(1, Curses::COLOR_WHITE,   Curses::COLOR_BLACK)
  Curses.init_pair(2, Curses::COLOR_MAGENTA, Curses::COLOR_BLACK)
  Curses.init_pair(3, Curses::COLOR_BLUE,    Curses::COLOR_BLACK)
  Curses.init_pair(4, Curses::COLOR_YELLOW,  Curses::COLOR_BLACK)
  Curses.init_pair(5, Curses::COLOR_RED,     Curses::COLOR_BLACK)
  Curses.init_pair(6, Curses::COLOR_GREEN,   Curses::COLOR_BLACK)
  Curses.init_pair(7, Curses::COLOR_CYAN,    Curses::COLOR_BLACK)

  while Curses.cols < MIN_WIDTH or Curses.lines < MIN_HEIGHT
    # fffffuuuuuuuuuuu line length > 80
    putstr(Curses.stdscr, 3, 5, 
           "Please adjust your console to at least #{MIN_WIDTH}x#{MIN_HEIGHT}")
    Curses.stdscr.refresh
  end

  game_win = Curses.stdscr.subwin(Curses.lines - 2, Curses.cols - 30, 
                                  0, 0)

  hud_win = Curses.stdscr.subwin(Curses.lines - 2, 30, 
                                 0, Curses.cols - 30)

  msg_win = Curses.stdscr.subwin(2, Curses.cols, Curses.lines - 2, 0)

  begin
    yield game_win, hud_win, msg_win
  ensure
    game_win.close
    hud_win.close
    Curses.close_screen
  end
end

def render_game(win, game)
  half_width  = (win.maxx / 2).round
  half_height = (win.maxy / 2).round
  center      = game.view_position

  i = 0 # cols
  j = 0 # rows
  ((center.x - half_width)..(center.x + half_width)).each do |x|
    ((center.y - half_height)..(center.y + half_height)).each do |y|
      tile = game.dungeon.tile_at(GameName::Point.new(x, y))
      if tile and tile.lit
        win.color_set(tile.color)
        symbol = tile.symbol
      elsif tile.seen
        win.color_set(2)
        symbol = tile.symbol
      else
        win.color_set(1)
        symbol = ' '
      end
      putch(win, j, i, symbol)

      j += 1
    end

    i += 1
    j = 0
  end
  
  win.color_set(6)
  putch(win, half_height, half_width, game.player.symbol)

  win.noutrefresh
end

def render_hud(win, game)
  win.clear

  player = game.player

  putstr(win, 0, 1, game.player.name)
  putstr(win, 1, 1, "Turn: #{game.turn}")
  putstr(win, 2, 1, "Health: #{player.health}/#{player.max_health}")
  putstr(win, 3, 1, "Level: #{player.level} (#{player.experience}/#{player.next_level})")
  putstr(win, 4, 1, "Floor: #{game.dungeon.floor_num}")

  inventory = player.inventory.items
  putstr(win, 5, 1, "Inventory (#{inventory.length} items)")

  y = 0
  inventory.each do |key, item|
    putstr(win, 6 + y, 1, "(#{key}) #{item.name}")
    y += 1
  end

  win.noutrefresh
end

def render_msg(win, game)
  win.clear
  
  y = 0
  if GameName.announcements
    GameName.announcements.reverse_each do |msg|
      putstr(win, y, 0, msg)
      y += 1
      break if y > 1
    end
  end

  win.noutrefresh
end

def render_loss(win)
  win.clear
  putstr(win, 0, 0, 'You have died. Press \'q\' to quit...')
  win.refresh
  until Curses.getch == ?q; end
end

def render_win(win)
  win.clear
  putstr(win, 0, 0, 'Meow..')
  putstr(win, 1, 0, 'Press "q" to quit...')
  win.refresh
  until Curses.getch == ?q; end

  Curses.stdscr.clear
  putstr(Curses.stdscr, 1, 0, "You have successfully found your friend - the kitten named 'Billy'.\nHe is, miraculously, in good health. You have won!\n\nPress 'q' to quit.")
  Curses.refresh
  until Curses.getch == ?q; end
end

init_screen do |game_win, hud_win, msg_win|
  game = GameName.new
  game.generate_dungeon(100, 100, 3)

  game.think
  while game.running?
    render_game(game_win, game)
    render_hud(hud_win, game)
    render_msg(msg_win, game)
    Curses.refresh

    if game.over?
      render_loss(msg_win)
      break
    end

    if game.won
      render_win(msg_win)
      break
    end

    game.handle_input()
    game.think
  end
end

